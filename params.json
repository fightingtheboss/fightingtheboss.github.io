{"name":"Scaling Meteor","tagline":"My experiences scaling up Pegleg (pegleg.it), a Meteor project, beyond a single instance","body":"### It's Good To Have Goals\r\nI had three main objectives when scaling Pegleg to multiple instances:\r\n\r\n1. Site handles the load and works correctly\r\n2. Simple deployment\r\n3. Low cost\r\n\r\nI used these three criteria to evaluate the suitability of each solution for my purposes. Because of a lack of tools and time, I didn't load test any of these scenarios scientifically, so the decision on criteria 1 was made anecdotally (suitable enough for a small side-project like Pegleg). I'll circle back to load testing near the end.\r\n\r\n### Back to the Future (aka TL;DR)\r\nGoing from zero to hero took a few iterations (and a lot of research and trial-and-error). I ended up with three different deployment strategies for scaling Meteor:\r\n\r\n1. Manual deployment to AWS\r\n2. AWS Elastic Beanstalk deployment\r\n3. Custom deployment on private VPS\r\n\r\nAfter running on the manual AWS setup for a month, I ultimately ended up going with the private VPS option for simplicity and cost reasons that I'll get into below.\r\n\r\n### Understanding The Problem\r\nThe free hosting provided by Meteor at meteor.com is great for deploying prototypes and toys but if your traffic starts to ramp up, you'll eventually have to move on to your own infrastructure. Given that deploying to meteor.com is basically a black box, there's some background information you need to deploy a Meteor app to your own stack:\r\n\r\n* Node\r\n  * Compatible version\r\n  * Memory footprint\r\n* MongoDB\r\n  * Backing up your data\r\n  * Hosting your data\r\n* Meteor (and Meteorite)\r\n  * Building your app\r\n  * Bundles\r\n* Load Balancing & Session Affinity\r\n\r\n\r\n\r\n## Background\r\n### Beginnings\r\nI built [Pegleg](http://pegleg.it) back in January as a side-project to learn Meteor and to help friends and film-buffs find full-length movies on YouTube by working together. Initially I was using the generously provided and dead simple free meteor.com hosting, which is the perfect platform for getting your Meteor prototypes some real-world users on the web. With a few blog posts about it and word of mouth, it slowly gained a bit of popularity.\r\n\r\n### Blow-Up\r\nAfter being up and slowly improved for about six or eight weeks, the link to Pegleg was posted on Hacker News on a Friday morning and made it to the home page. After an initial bout of euphoria about having hit on the holy grail of an HN home page mention, I was quickly hit with the reality of what that means. The free hosting provided by Meteor wasn't designed to handle that kind of load and the site slowed to an unusable crawl.\r\n\r\n### Short-Circuit\r\nAfter trying to resolve things with the gracious and patient help of Kara and David at Meteor one thing became certain: I needed to scale off of the Meteor free hosting to meet the needs of the new influx of users. This was easier said than done because there wasn't much in the way of documentation on that front. David pointed me to [this blog post about load balancing on AWS](http://www.ripariandata.com/blog/creating-an-aws-elastic-load-balancer) to get me started and that's where we'll begin this journey.\r\n\r\n### Batteries Not Included\r\nAs a caveat, I'm certainly not a sys-ops master, and I often find jockeying servers and worrying about deployments to be a tedious necessary evil to get my sites online. This situation forced me to learn a bunch of the stuff I'd been wilfully ignoring for as long as I could. If you are great at this stuff I'd love to hear feedback on better ways to approach this.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}